#!/usr/bin/python

import usb.core
import usb.util
import time
from flask import *
import sqlite3

DATABASE = "PATH/TO/switches.db"

def connect_db():
  return sqlite3.connect(DATABASE)

def init_db():
  conn = connect_db()
  conn.row_factory = sqlite3.Row
  c = conn.cursor()

  # create the table if it doesn't exist
  if len(c.execute('''SELECT name FROM sqlite_master WHERE type='table' AND name='switches';''').fetchall()) == 0:
    c.execute('''CREATE TABLE switches (id TEXT, name TEXT, state BOOLEAN, visible BOOLEAN)''')
    for letter in ('a', 'b', 'c'):
      for number in range(1, 4):
        c.execute('''INSERT INTO switches VALUES (?, ?, ?, 1)''', ("%s%d" % (letter, number), "", 0))
  conn.commit()
  conn.close()

init_db()

class Switch:
  def __init__(self, id, name = "", state = False):
    self.state = state
    self.id = id
    self.name = name

class OOKDevice:
  def __init__(self):
    interface = 0
    # find our device
    self.dev = usb.core.find(idVendor=0x04D8, idProduct=0x0043)

    # was it found?
    if self.dev is None:
      raise ValueError('Device not found')

    # detach kernel driver if necessary so that we can claim it
    if self.dev.is_kernel_driver_active(interface) is True:
      print "but we need to detach kernel driver"
      self.dev.detach_kernel_driver(interface)

    # set the active configuration. With no arguments, the first
    # configuration will be the active one
    self.dev.set_configuration()

    # claim the device
    print "claiming device"
    usb.util.claim_interface(self.dev, interface)

  def __enter__(self):
    return self.dev

  def __exit__(self, type, value, traceback):
    self.close()

  def close(self):
    usb.util.dispose_resources(self.dev)

def getId(name):
  result = g.db.execute('''SELECT * FROM switches WHERE id = ? OR name = ?''', (name, name)).fetchall()
  if len(result) == 0:
    abort(404)
  return result[0]

app = Flask(__name__)

@app.before_request
def before_request():
  g.db = connect_db()
  g.db.row_factory = sqlite3.Row

@app.teardown_request
def teardown_request(exception):
  g.db.close()

@app.route('/')
def index():
  result = g.db.execute('''SELECT * FROM switches''').fetchall()
  switches = [{"id": row["id"], "name": row["name"], "state": row["state"]} for row in result if row["visible"] == 1]
  hidden = [{"id": row["id"], "name": row["name"], "state": row["state"]} for row in result if row["visible"] == 0]
  return render_template('index.htm', switches = switches, hidden = hidden)

@app.route('/switch/<string:id>', methods=['GET'])
def switchGetState(id):
  result = g.db.execute('''SELECT * FROM switches WHERE id = ? OR name = ?''', (id, id)).fetchall()
  if len(result) == 0:
    return "Switch not found", 404
  switch = result[0]
  return str(switch["state"])

@app.route('/switch/<string:id>', methods=['POST'])
def switchSetState(id):
  action = request.form["state"]
  switch = getId(id)
  state = switch["state"]

  if action == "toggle":
    state = not state
  elif action == "1":
    state = True
  elif action == "0":
    state = False

  success = False
  with OOKDevice() as dev:
    for i in range(2):
      dev.write(0x01, "s%s%d" % (switch["id"], state))
    try:
      read = "".join(chr(n) for n in dev.read(0x81, 64, None))
      success = "switch" in read
    except Exception as e:
      abort(500)

  if success:
    g.db.execute('''UPDATE switches SET state = ? WHERE id = ?''', (state, switch["id"]))
    g.db.commit()
  else:
    abort(500)

  return "%d" % (state)

@app.route('/switch/<string:id>/name', methods=['GET'])
def switchGetName(id):
  switch = getId(id)
  return str(switch["name"])

@app.route('/switch/<string:id>/name', methods=['POST'])
def switchSetName(id):
  name = request.form["name"]
  switch = getId(id)
  
  result = g.db.execute('''UPDATE switches SET name = ? WHERE id = ?''', (name, switch["id"]))
  g.db.commit()

  return "1"

@app.route('/switch/<string:id>/show', methods=['POST'])
def switchShow(id):
  switch = getId(id)
  
  result = g.db.execute('''UPDATE switches SET visible = 1 WHERE id = ?''', (switch["id"],))
  g.db.commit()

  return "1"

@app.route('/switch/<string:id>/hide', methods=['POST'])
def switchHide(id):
  switch = getId(id)
  
  result = g.db.execute('''UPDATE switches SET visible = 0 WHERE id = ?''', (switch["id"],))
  g.db.commit()

  return "1"

if __name__ == '__main__':
  app.run(host='0.0.0.0')

